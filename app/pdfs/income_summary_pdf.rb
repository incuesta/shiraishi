class IncomeSummaryPdf < Prawn::Document

	def initialize(loans, view_context, issued_by = "ACGECCO", title = "", action_name)
		super()

		@loans = loans
		@view = view_context	# Pass the view_context to be able to use View Helper methods
		@issued_by = issued_by
		@title = title
		@action_name = action_name

		font "Helvetica"

		header_image

		report_title
		report_issuer

		income_summary_table
	end





	def header_image
		image "#{Rails.root}/app/pdfs/victini_1.png", height: 75, position: :center
	end



	# The title of the report
	def report_title
		move_down 10
		text @title, style: :bold, align: :center
	end


	# The User who generated the report
	def report_issuer
		move_down 5
		text "Generated by: #{@issued_by}", size: 7, align: :center
	end





	def income_summary_table
		move_down 10


		font("Helvetica", size: 8) do
			table income_summary_data, position: :center do
				row(0).font_style = :bold
				self.header = true
			end
		end
	end





	def income_summary_data

		data = [[{content: "Current date: #{Date.current}", colspan: 8, height: 50}]]

		@loans.each { | loan | 
			principal_paid = loan.principal_amount - loan.accounting_book.overall_principal_balance
			interest_paid = loan.net_interest - loan.accounting_book.overall_interest_balance

 			
 			rows = [
				[{content: loan.string_id, colspan: 8, height: 30, font_style: :bold}],


				['Principal', 'Rate', 'Disbursed on', 'Duration', 'Net loan', 'Net interest', 'Principal Paid', 'Interest Paid'],
				[ {content: price(loan.principal_amount), height: 40}, percent(loan.loan_type.rate), loan.disbursement_date.to_date, "#{loan.loan_type.duration} mos.", price(loan.net_loan), price(loan.net_interest), price(principal_paid), price(interest_paid)],

				
				['', '', '', '', '', '', 'Principal balance', 'Interest balance'],
				['', '', '', '', '', '', price(loan.accounting_book.overall_principal_balance), price(loan.accounting_book.overall_interest_balance)],


				[ {content: '', colspan: 8, height: 50}]

			]

			data = data + rows
		}

		data
	end





	private 

		def price(price)
			@view.number_to_currency price, unit: 'Php '
		end

		def percent(number)
			@view.number_to_percentage number*100, precision: 0
		end

end